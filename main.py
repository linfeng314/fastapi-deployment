# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jHXbQZv-aOR5QFx3X-ZNNnU5G5ytEYcY
"""

from fastapi import FastAPI
import pandas as pd

app = FastAPI()

# 决策树打分逻辑
def decision_tree_score(row):
    _BRANCH_ = -1
    if row["Magnitude_Category"] == "MODERATE":
        _BRANCH_ = 1
    elif row["Magnitude_Category"] == "HIGH":
        _BRANCH_ = 2
    elif pd.notnull(row["G_Magnitude_Source"]):
        if row["G_Magnitude_Source"] in [2, 1, 0]:
            _BRANCH_ = 1
        elif row["G_Magnitude_Source"] in [5, 3, 4]:
            _BRANCH_ = 2

    if _BRANCH_ == 2:
        if row["G_Magnitude_Source"] in [5, 4]:
            return 7.77142857142857
        elif row["G_Magnitude_Source"] == 0:
            return 6.2375
        elif pd.notnull(row["Azimuthal_Gap"]) and row["Azimuthal_Gap"] < 15.85:
            return 6.70797872340425
        elif pd.notnull(row["Depth_Seismic_Stations"]) and row["Depth_Seismic_Stations"] >= 592.5:
            return 6.71304347826087
        else:
            return 6.31734082397003
    else:
        if row["G_Magnitude_Source"] in [2, 3]:
            return 5.7005
        elif pd.notnull(row["Azimuthal_Gap"]) and row["Azimuthal_Gap"] >= 60:
            return 5.83901408450704
        else:
            return 5.75815811606392

@app.post("/predict")
def predict(input_data: dict):
    """
    接收 JSON 格式数据，进行预测并返回结果。
    """
    # 转换为单行 DataFrame
    df = pd.DataFrame([input_data])

    # 应用打分逻辑
    df["P_Magnitude"] = df.apply(decision_tree_score, axis=1)

    # 返回预测结果
    return {"P_Magnitude": df["P_Magnitude"].iloc[0]}