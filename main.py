# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mK5YN0HNsIPMVldsjWaelHG_wEywt1hp
"""

from fastapi import FastAPI
from pydantic import BaseModel, Field
import math

app = FastAPI()

# 输入数据模型
class InputData(BaseModel):
    Azimuthal_Gap: float = Field(..., description="The Azimuthal Gap value.")
    Depth_Seismic_Stations: float = Field(..., description="The Depth of Seismic Stations.")
    Root_Mean_Square: float = Field(..., description="The Root Mean Square value.")
    G_Magnitude_Source: int = Field(..., description="G_Magnitude_Source (0-5).")
    G_Magnitude_Type: int = Field(..., description="G_Magnitude_Type (0-2).")
    Magnitude_Category: str = Field(..., pattern="^(MODERATE|HIGH)$", description="Category (MODERATE or HIGH)")

@app.post("/predict")
async def predict(input_data: InputData):
    try:
        # 标准化输入数据
        S_Azimuthal_Gap = -2.12512740283801 + 0.05526748405791 * input_data.Azimuthal_Gap
        S_Depth_Seismic_Stations = -0.5410097321117 + 0.00643900637711 * input_data.Depth_Seismic_Stations
        S_Root_Mean_Square = -6.27026505105045 + 6.16946118273854 * input_data.Root_Mean_Square

        # 生成分类变量的 Dummy 编码
        G_Magnitude_Source0 = 1 if input_data.G_Magnitude_Source == 0 else 0
        G_Magnitude_Source1 = 1 if input_data.G_Magnitude_Source == 1 else 0
        G_Magnitude_Source2 = 1 if input_data.G_Magnitude_Source == 2 else 0
        G_Magnitude_Source3 = 1 if input_data.G_Magnitude_Source == 3 else 0
        G_Magnitude_Source4 = 1 if input_data.G_Magnitude_Source == 4 else 0

        G_Magnitude_Type0 = 1 if input_data.G_Magnitude_Type == 0 else 0
        G_Magnitude_Type1 = 1 if input_data.G_Magnitude_Type == 1 else 0

        Magnitude_CategoryHigh = 1 if input_data.Magnitude_Category == "HIGH" else -1

        # 隐藏层计算
        H11 = (0.19190121170178 * S_Azimuthal_Gap +
               -0.5719694506571 * S_Depth_Seismic_Stations +
               -0.23891882761621 * S_Root_Mean_Square +
               1.05517875912518 * G_Magnitude_Source0 +
               0.72282833768198 * G_Magnitude_Source1 +
               0.42489674851332 * G_Magnitude_Source2 +
               -0.32565043120402 * G_Magnitude_Source3 +
               -3.06012289176397 * G_Magnitude_Source4 +
               -0.0526854817304 * G_Magnitude_Type0 +
               -0.31418754201092 * G_Magnitude_Type1 +
               0.48111824026246 * Magnitude_CategoryHigh)

        H12 = (-0.00130183647198 * S_Azimuthal_Gap +
               -0.29204962349591 * S_Depth_Seismic_Stations +
               -0.06283174801244 * S_Root_Mean_Square +
               -0.36087066019891 * G_Magnitude_Source0 +
               -0.29144899083224 * G_Magnitude_Source1 +
               -0.27671832608147 * G_Magnitude_Source2 +
               -0.43789931696871 * G_Magnitude_Source3 +
               -0.41726032686777 * G_Magnitude_Source4 +
               -0.16739759474318 * G_Magnitude_Type0 +
               0.02652363156263 * G_Magnitude_Type1 +
               0.51573467843619 * Magnitude_CategoryHigh)

        H13 = (-0.17008489191175 * S_Azimuthal_Gap +
               0.37706762320491 * S_Depth_Seismic_Stations +
               0.20919977862769 * S_Root_Mean_Square +
               -0.83072073254396 * G_Magnitude_Source0 +
               -1.18117292167867 * G_Magnitude_Source1 +
               -1.14435595593592 * G_Magnitude_Source2 +
               -0.73421542003545 * G_Magnitude_Source3 +
               0.20608678937934 * G_Magnitude_Source4 +
               0.05455398552437 * G_Magnitude_Type0 +
               0.01835274974742 * G_Magnitude_Type1 +
               1.12464966273991 * Magnitude_CategoryHigh)

        # 激活函数
        H11 = math.tanh(0.27044721060738 + H11)
        H12 = math.tanh(-0.56454763627741 + H12)
        H13 = math.tanh(-1.06662501754817 + H13)

        # 输出层计算
        P_Magnitude = (-0.13957417442369 * H11 +
                       1.03937100250865 * H12 +
                       0.64633640414653 * H13 +
                       7.28812534728844)

        return {"P_Magnitude": P_Magnitude}

    except Exception as e:
        return {"error": f"Error in prediction: {str(e)}"}